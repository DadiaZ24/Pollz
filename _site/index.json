{
  "Presentation/architecture.html": {
    "href": "Presentation/architecture.html",
    "title": "Onion Architeture | PollZ",
    "summary": "Onion Architeture The project follows the Onion Architecture, which emphasizes the separation of concerns and promotes a clear dependency rule: code can depend on layers inward but not outward. The main layers are: Domain Layer: Contains the core business logic and domain entities. This layer is independent of any other layers. Application Layer: Contains the application services and interfaces. This layer depends on the Domain Layer. Infrastructure Layer: Contains the implementation of interfaces and external dependencies such as databases and APIs. This layer depends on the Application Layer. Presentation Layer: Contains the user interface and API controllers. This layer depends on the Application Layer. Implementation in PollZ Domain Layer: The domain entities such as User, Poll, Question, and Answer are defined in the Model directory. Application Layer: The application services such as UserService, PollService, QuestionService, and AnswerService are defined in the Service directory. Infrastructure Layer: The data context and database migrations are defined in the Data directory. The implementation of repository interfaces is also part of this layer. Presentation Layer: The API controllers such as UserRouter, PollRouter, QuestionRouter, and AnswerRouter are defined in the Router directory. The frontend components and pages are defined in the Frontend directory."
  },
  "Presentation/conclusion.html": {
    "href": "Presentation/conclusion.html",
    "title": "PollZ Platform | PollZ",
    "summary": "PollZ Platform The PollZ project is a robust and scalable polling application built using modern frameworks and following the Onion Architecture. It ensures a clear separation of concerns, making the codebase maintainable and testable. The use of React, TypeScript, and Tailwind CSS on the frontend provides a responsive and interactive user experience, while ASP.NET Core and Entity Framework Core on the backend ensure reliable and efficient data management. Thank you for your attention. If you have any questions, feel free to contact."
  },
  "Presentation/dbschema.html": {
    "href": "Presentation/dbschema.html",
    "title": "Database Schema | PollZ",
    "summary": "Database Schema Here you can check the database schema designed for this project:"
  },
  "Presentation/frameworks-technologies.html": {
    "href": "Presentation/frameworks-technologies.html",
    "title": "Frameworks and Technologies | PollZ",
    "summary": "Frameworks and Technologies Backend ASP.NET Core: A cross-platform framework for building modern, cloud-based, internet-connected applications. It is used to build the backend services and APIs. Entity Framework Core: An object-database mapper for .NET. It is used for database operations and migrations. Npgsql: A .NET data provider for PostgreSQL. It is used to connect and interact with the PostgreSQL database. Frontend React: A JavaScript library for building user interfaces. It is used to build the frontend components and pages. TypeScript: A typed superset of JavaScript that compiles to plain JavaScript. It is used to add static types to the frontend code. Vite: A build tool that provides a faster and leaner development experience for modern web projects. It is used to bundle and serve the frontend code. Tailwind CSS: A utility-first CSS framework for rapidly building custom user interfaces. It is used to style the frontend components. Other Tools ESLint: A tool for identifying and fixing problems in JavaScript code. It is used to enforce coding standards and best practices. PostCSS: A tool for transforming CSS with JavaScript plugins. It is used to process and optimize CSS files."
  },
  "Presentation/key-features.html": {
    "href": "Presentation/key-features.html",
    "title": "Key Features | PollZ",
    "summary": "Key Features User Authentication Registration: Users can register by providing their username, email, password, and role. Login: Users can log in using their credentials to access the application. Poll Management Create Poll: Users can create new polls by providing the poll title and description. View Polls: Users can view a list of all polls. Poll Details: Users can view the details of a specific poll, including the questions and voters. Question Management Add Question: Users can add questions to a poll. Update Question: Users can update the details of a question. Delete Question: Users can delete a question from a poll. Voting Cast Vote: Users can create voters that can vote on a specific poll using an unique token. View Results: Users can view the results of the votes for each question."
  },
  "Presentation/presentation.html": {
    "href": "Presentation/presentation.html",
    "title": "Getting Started | PollZ",
    "summary": "Getting Started Welcome to the presentation of the PollZ project. This project is a comprehensive polling application that allows users to create, manage, and participate in polls. The project is built using a variety of modern frameworks and follows the Onion Architecture to ensure maintainability, scalability, and testability."
  },
  "Presentation/project-structure.html": {
    "href": "Presentation/project-structure.html",
    "title": "Project Structure | PollZ",
    "summary": "Project Structure The project is organized into several directories, each serving a specific purpose: Backend/: Contains the backend services, routers, models, and data transfer objects (DTOs). Frontend/: Contains the frontend components, pages, and services. Data/: Contains database migration scripts and the data context. configs/: Contains configuration files."
  },
  "doc/Oscars.Backend.Dtos.AnswerDto.html": {
    "href": "doc/Oscars.Backend.Dtos.AnswerDto.html",
    "title": "Class AnswerDto | PollZ",
    "summary": "Class AnswerDto Namespace Oscars.Backend.Dtos Assembly Oscars.dll public class AnswerDto Inheritance object AnswerDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id public required int Id { get; set; } Property Value int QuestionId public required int QuestionId { get; set; } Property Value int Title public required string Title { get; set; } Property Value string"
  },
  "doc/Oscars.Backend.Dtos.LoginDto.html": {
    "href": "doc/Oscars.Backend.Dtos.LoginDto.html",
    "title": "Class LoginDto | PollZ",
    "summary": "Class LoginDto Namespace Oscars.Backend.Dtos Assembly Oscars.dll Data Transfer Object (DTO) for user login. public class LoginDto Inheritance object LoginDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Password public required string Password { get; set; } Property Value string Username public required string Username { get; set; } Property Value string"
  },
  "doc/Oscars.Backend.Dtos.PollDto.html": {
    "href": "doc/Oscars.Backend.Dtos.PollDto.html",
    "title": "Class PollDto | PollZ",
    "summary": "Class PollDto Namespace Oscars.Backend.Dtos Assembly Oscars.dll public class PollDto Inheritance object PollDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Created_at public required DateTime Created_at { get; set; } Property Value DateTime Description public string? Description { get; set; } Property Value string Id public required int Id { get; set; } Property Value int Title public required string Title { get; set; } Property Value string Updated_at public DateTime? Updated_at { get; set; } Property Value DateTime? UserId public required int UserId { get; set; } Property Value int"
  },
  "doc/Oscars.Backend.Dtos.QuestionDto.html": {
    "href": "doc/Oscars.Backend.Dtos.QuestionDto.html",
    "title": "Class QuestionDto | PollZ",
    "summary": "Class QuestionDto Namespace Oscars.Backend.Dtos Assembly Oscars.dll public class QuestionDto Inheritance object QuestionDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Description public required string Description { get; set; } Property Value string Id public required int Id { get; set; } Property Value int Title public required string Title { get; set; } Property Value string pollId public required int pollId { get; set; } Property Value int"
  },
  "doc/Oscars.Backend.Dtos.UniqueCodeDto.html": {
    "href": "doc/Oscars.Backend.Dtos.UniqueCodeDto.html",
    "title": "Class UniqueCodeDto | PollZ",
    "summary": "Class UniqueCodeDto Namespace Oscars.Backend.Dtos Assembly Oscars.dll Represents a unique code assigned to a voter. public class UniqueCodeDto Inheritance object UniqueCodeDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Code public required string Code { get; set; } Property Value string Id public required int Id { get; set; } Property Value int Used public required bool Used { get; set; } Property Value bool VoterId public required int VoterId { get; set; } Property Value int"
  },
  "doc/Oscars.Backend.Dtos.UserDto.html": {
    "href": "doc/Oscars.Backend.Dtos.UserDto.html",
    "title": "Class UserDto | PollZ",
    "summary": "Class UserDto Namespace Oscars.Backend.Dtos Assembly Oscars.dll public class UserDto Inheritance object UserDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Email public required string Email { get; set; } Property Value string Id public int Id { get; set; } Property Value int Password public required string Password { get; set; } Property Value string Role public required string Role { get; set; } Property Value string Username public required string Username { get; set; } Property Value string"
  },
  "doc/Oscars.Backend.Dtos.VoteRequestDto.html": {
    "href": "doc/Oscars.Backend.Dtos.VoteRequestDto.html",
    "title": "Class VoteRequestDto | PollZ",
    "summary": "Class VoteRequestDto Namespace Oscars.Backend.Dtos Assembly Oscars.dll Represents a request to cast a vote in a poll. public class VoteRequestDto Inheritance object VoteRequestDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AnswerId public int AnswerId { get; set; } Property Value int QuestionId public int QuestionId { get; set; } Property Value int VoterId public int VoterId { get; set; } Property Value int"
  },
  "doc/Oscars.Backend.Dtos.VoteResultDto.html": {
    "href": "doc/Oscars.Backend.Dtos.VoteResultDto.html",
    "title": "Class VoteResultDto | PollZ",
    "summary": "Class VoteResultDto Namespace Oscars.Backend.Dtos Assembly Oscars.dll Represents a request to cast a vote result in a poll. public class VoteResultDto Inheritance object VoteResultDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Answer public string? Answer { get; set; } Property Value string AnswerId public int AnswerId { get; set; } Property Value int VoteCount public int VoteCount { get; set; } Property Value int"
  },
  "doc/Oscars.Backend.Dtos.VoterDto.html": {
    "href": "doc/Oscars.Backend.Dtos.VoterDto.html",
    "title": "Class VoterDto | PollZ",
    "summary": "Class VoterDto Namespace Oscars.Backend.Dtos Assembly Oscars.dll public class VoterDto Inheritance object VoterDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Email public string? Email { get; set; } Property Value string Id public required int Id { get; set; } Property Value int Name public required string Name { get; set; } Property Value string PollId Represents a Data Transfer Object (DTO) for a voter in the PollZ platform. public required int PollId { get; set; } Property Value int"
  },
  "doc/Oscars.Backend.Dtos.VoterWithCodeDto.html": {
    "href": "doc/Oscars.Backend.Dtos.VoterWithCodeDto.html",
    "title": "Class VoterWithCodeDto | PollZ",
    "summary": "Class VoterWithCodeDto Namespace Oscars.Backend.Dtos Assembly Oscars.dll Represents a voter with an associated code in the polling system. public class VoterWithCodeDto Inheritance object VoterWithCodeDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Code public required string Code { get; set; } Property Value string Email public string? Email { get; set; } Property Value string Id public required int Id { get; set; } Property Value int Name public required string Name { get; set; } Property Value string PollId public required int PollId { get; set; } Property Value int Used public required bool Used { get; set; } Property Value bool"
  },
  "doc/Oscars.Backend.Dtos.html": {
    "href": "doc/Oscars.Backend.Dtos.html",
    "title": "Namespace Oscars.Backend.Dtos | PollZ",
    "summary": "Namespace Oscars.Backend.Dtos Classes AnswerDto LoginDto Data Transfer Object (DTO) for user login. PollDto QuestionDto UniqueCodeDto Represents a unique code assigned to a voter. UserDto VoteRequestDto Represents a request to cast a vote in a poll. VoteResultDto Represents a request to cast a vote result in a poll. VoterDto VoterWithCodeDto Represents a voter with an associated code in the polling system."
  },
  "doc/Oscars.Backend.Model.Answer.html": {
    "href": "doc/Oscars.Backend.Model.Answer.html",
    "title": "Class Answer | PollZ",
    "summary": "Class Answer Namespace Oscars.Backend.Model Assembly Oscars.dll Represents an answer to a question in the PollZ platform. public class Answer Inheritance object Answer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id public required int Id { get; set; } Property Value int QuestionId public required int QuestionId { get; set; } Property Value int Title public required string Title { get; set; } Property Value string"
  },
  "doc/Oscars.Backend.Model.Poll.html": {
    "href": "doc/Oscars.Backend.Model.Poll.html",
    "title": "Class Poll | PollZ",
    "summary": "Class Poll Namespace Oscars.Backend.Model Assembly Oscars.dll Represents a poll created by a user. public class Poll Inheritance object Poll Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Created_at public required DateTime Created_at { get; set; } Property Value DateTime Description public string? Description { get; set; } Property Value string Id public required int Id { get; set; } Property Value int Title public required string Title { get; set; } Property Value string Updated_at public DateTime? Updated_at { get; set; } Property Value DateTime? UserId public required int UserId { get; set; } Property Value int"
  },
  "doc/Oscars.Backend.Model.Question.html": {
    "href": "doc/Oscars.Backend.Model.Question.html",
    "title": "Class Question | PollZ",
    "summary": "Class Question Namespace Oscars.Backend.Model Assembly Oscars.dll Represents a question in a poll. public class Question Inheritance object Question Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Description public required string Description { get; set; } Property Value string Id public required int Id { get; set; } Property Value int Title public required string Title { get; set; } Property Value string pollId public required int pollId { get; set; } Property Value int"
  },
  "doc/Oscars.Backend.Model.UniqueCode.html": {
    "href": "doc/Oscars.Backend.Model.UniqueCode.html",
    "title": "Class UniqueCode | PollZ",
    "summary": "Class UniqueCode Namespace Oscars.Backend.Model Assembly Oscars.dll Represents a unique code associated with a voter. public class UniqueCode Inheritance object UniqueCode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class is used to generate and manage unique codes for voters. Each unique code has an identifier, a voter identifier, the code itself, and a flag indicating whether the code has been used. Properties Code public required string Code { get; set; } Property Value string Id public required int Id { get; set; } Property Value int Used public required bool Used { get; set; } Property Value bool VoterId public required int VoterId { get; set; } Property Value int Methods Generate() Generates a random 6-character string consisting of uppercase letters, lowercase letters, and digits. public string Generate() Returns string A randomly generated 6-character string."
  },
  "doc/Oscars.Backend.Model.Vote.html": {
    "href": "doc/Oscars.Backend.Model.Vote.html",
    "title": "Class Vote | PollZ",
    "summary": "Class Vote Namespace Oscars.Backend.Model Assembly Oscars.dll Represents a vote in the polling system. public class Vote Inheritance object Vote Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks The Vote class contains information about a vote, including the IDs of the vote, answer, question, and voter, as well as timestamps for when the vote was created and last updated. Properties AnswerId public required int AnswerId { get; set; } Property Value int CreatedAt public required DateTime CreatedAt { get; set; } Property Value DateTime Id public required int Id { get; set; } Property Value int QuestionId public required int QuestionId { get; set; } Property Value int UpdatedAt public DateTime UpdatedAt { get; set; } Property Value DateTime VoterId public required int VoterId { get; set; } Property Value int"
  },
  "doc/Oscars.Backend.Model.Voter.html": {
    "href": "doc/Oscars.Backend.Model.Voter.html",
    "title": "Class Voter | PollZ",
    "summary": "Class Voter Namespace Oscars.Backend.Model Assembly Oscars.dll Represents a voter in a poll. public class Voter Inheritance object Voter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Email public string? Email { get; set; } Property Value string Id public required int Id { get; set; } Property Value int Name public required string Name { get; set; } Property Value string PollId public required int PollId { get; set; } Property Value int"
  },
  "doc/Oscars.Backend.Model.html": {
    "href": "doc/Oscars.Backend.Model.html",
    "title": "Namespace Oscars.Backend.Model | PollZ",
    "summary": "Namespace Oscars.Backend.Model Classes Answer Represents an answer to a question in the PollZ platform. Poll Represents a poll created by a user. Question Represents a question in a poll. UniqueCode Represents a unique code associated with a voter. Vote Represents a vote in the polling system. Voter Represents a voter in a poll."
  },
  "doc/Oscars.Backend.Router.AnswerRouter.html": {
    "href": "doc/Oscars.Backend.Router.AnswerRouter.html",
    "title": "Class AnswerRouter | PollZ",
    "summary": "Class AnswerRouter Namespace Oscars.Backend.Router Assembly Oscars.dll [ApiController] [Route(\"api/answer\")] public class AnswerRouter : ControllerBase Inheritance object ControllerBase AnswerRouter Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AnswerRouter(AnswerService) public AnswerRouter(AnswerService answerService) Parameters answerService AnswerService Methods Create(AnswerDto) Handles HTTP POST requests to create a new answer. [HttpPost] public ActionResult Create(AnswerDto answerDto) Parameters answerDto AnswerDto The data transfer object containing the answer details. Returns ActionResult An ActionResult that contains the created answer and a location header with the URL to retrieve the answer by its ID. Delete(int) Deletes an answer with the specified id. [HttpDelete(\"{id}\")] public ActionResult Delete(int id) Parameters id int The id of the answer to delete. Returns ActionResult Returns a ActionResult. If the id is invalid, returns a BadRequestResult with an error message. If the deletion is successful, returns a NoContentResult. GetAll() Handles HTTP GET requests to retrieve all answers. [HttpGet] public ActionResult GetAll() Returns ActionResult An ActionResult containing the list of all answers if found; otherwise, a NotFoundResult result with a message indicating no answers were found. GetById(int) Handles HTTP GET requests to retrieve an answer by its ID. [HttpGet(\"{id}\")] public ActionResult GetById(int id) Parameters id int The ID of the answer to retrieve. Returns ActionResult An ActionResult containing the answer if found, or a NotFound result if the answer does not exist. GetByQuestionId(int) Retrieves answers by the specified question ID. [HttpGet(\"question/{questionId}\")] public ActionResult GetByQuestionId(int questionId) Parameters questionId int The ID of the question to retrieve answers for. Returns ActionResult An ActionResult containing the answers for the specified question ID. Returns a 404 Not Found response if no answers are found. Update(int, AnswerDto) Updates an existing answer with the specified id. [HttpPut(\"{id}\")] public ActionResult Update(int id, AnswerDto answerDto) Parameters id int The id of the answer to update. answerDto AnswerDto The data transfer object containing the updated answer details. Returns ActionResult Returns a ActionResult indicating the result of the update operation. If the id is invalid, returns a BadRequestResult with an error message. If the update is successful, returns a NoContentResult."
  },
  "doc/Oscars.Backend.Router.LoginRouter.html": {
    "href": "doc/Oscars.Backend.Router.LoginRouter.html",
    "title": "Class LoginRouter | PollZ",
    "summary": "Class LoginRouter Namespace Oscars.Backend.Router Assembly Oscars.dll Router for handling authentication-related requests. [EnableCors(\"AllowFrontend\")] [ApiController] [Route(\"api/auth\")] public class LoginRouter : ControllerBase Inheritance object ControllerBase LoginRouter Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LoginRouter(IAuthService) Initializes a new instance of the LoginRouter class. public LoginRouter(IAuthService authService) Parameters authService IAuthService The authentication service. Methods Login(LoginDto) Logs in a user. [HttpPost(\"login\")] public Task<IActionResult> Login(LoginDto loginDto) Parameters loginDto LoginDto The login data transfer object containing login details. Returns Task<IActionResult> An IActionResult indicating the result of the login attempt. Register(UserDto) Registers a new user. [HttpPost(\"register\")] public Task<IActionResult> Register(UserDto userDto) Parameters userDto UserDto The user data transfer object containing registration details. Returns Task<IActionResult> An IActionResult indicating the result of the registration."
  },
  "doc/Oscars.Backend.Router.PollRouter.html": {
    "href": "doc/Oscars.Backend.Router.PollRouter.html",
    "title": "Class PollRouter | PollZ",
    "summary": "Class PollRouter Namespace Oscars.Backend.Router Assembly Oscars.dll Router for handling poll-related requests. [ApiController] [Route(\"api/polls\")] public class PollRouter : ControllerBase Inheritance object ControllerBase PollRouter Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PollRouter(PollService) Router for handling poll-related requests. public PollRouter(PollService pollService) Parameters pollService PollService Methods Create(PollDto) Creates a new poll. [HttpPost] public ActionResult Create(PollDto pollDto) Parameters pollDto PollDto The poll data transfer object containing poll details. Returns ActionResult An ActionResult indicating the result of the creation. Delete(int) Deletes a poll by its ID. [HttpDelete(\"{id}\")] public ActionResult Delete(int id) Parameters id int The poll ID. Returns ActionResult An ActionResult indicating the result of the deletion. GetAll() Gets all polls. [HttpGet] public ActionResult GetAll() Returns ActionResult An ActionResult containing the list of polls. GetById(int) Gets a poll by its ID. [HttpGet(\"{id}\")] public ActionResult GetById(int id) Parameters id int The poll ID. Returns ActionResult An ActionResult containing the poll. Update(int, PollDto) Updates an existing poll. [HttpPut(\"{id}\")] public ActionResult Update(int id, PollDto pollDto) Parameters id int The poll ID. pollDto PollDto The poll data transfer object containing updated poll details. Returns ActionResult An ActionResult indicating the result of the update."
  },
  "doc/Oscars.Backend.Router.QuestionRouter.html": {
    "href": "doc/Oscars.Backend.Router.QuestionRouter.html",
    "title": "Class QuestionRouter | PollZ",
    "summary": "Class QuestionRouter Namespace Oscars.Backend.Router Assembly Oscars.dll Router for handling question-related requests. [ApiController] [Route(\"api/question\")] public class QuestionRouter : ControllerBase Inheritance object ControllerBase QuestionRouter Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors QuestionRouter(QuestionService) Router for handling question-related requests. public QuestionRouter(QuestionService questionService) Parameters questionService QuestionService Methods Create(QuestionDto) Creates a new question. [HttpPost] public ActionResult Create(QuestionDto questionDto) Parameters questionDto QuestionDto The question data transfer object containing question details. Returns ActionResult An ActionResult indicating the result of the creation. DeleteCategory(int) Deletes a question by its ID. [HttpDelete(\"{id}\")] public ActionResult DeleteCategory(int id) Parameters id int The question ID. Returns ActionResult An ActionResult indicating the result of the deletion. GetAll() Gets all questions. [HttpGet] public ActionResult GetAll() Returns ActionResult An ActionResult containing the list of questions. GetById(int) Gets a question by its ID. [HttpGet(\"{id}\")] public ActionResult GetById(int id) Parameters id int The question ID. Returns ActionResult An ActionResult containing the question. GetByPollId(int) Gets questions by poll ID. [HttpGet(\"poll/{pollId}\")] public ActionResult GetByPollId(int pollId) Parameters pollId int The poll ID. Returns ActionResult An ActionResult containing the questions. Update(int, QuestionDto) Updates an existing question. [HttpPut(\"{id}\")] public ActionResult Update(int id, QuestionDto questionDto) Parameters id int The question ID. questionDto QuestionDto The question data transfer object containing updated question details. Returns ActionResult An ActionResult indicating the result of the update."
  },
  "doc/Oscars.Backend.Router.UserRouter.html": {
    "href": "doc/Oscars.Backend.Router.UserRouter.html",
    "title": "Class UserRouter | PollZ",
    "summary": "Class UserRouter Namespace Oscars.Backend.Router Assembly Oscars.dll Router for handling user-related requests. [ApiController] [Route(\"api/users\")] public class UserRouter : ControllerBase Inheritance object ControllerBase UserRouter Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UserRouter(IUserService) Router for handling user-related requests. public UserRouter(IUserService userService) Parameters userService IUserService Methods CreateUser(UserDto) Creates a new user. [HttpPost] public IActionResult CreateUser(UserDto userDto) Parameters userDto UserDto The user data transfer object containing user details. Returns IActionResult An IActionResult indicating the result of the creation. DeleteUser(int) Deletes a user by their ID. [HttpDelete(\"{id}\")] public IActionResult DeleteUser(int id) Parameters id int The user ID. Returns IActionResult An IActionResult indicating the result of the deletion. GetAllUsers() Gets all users. [HttpGet] public IActionResult GetAllUsers() Returns IActionResult An IActionResult containing the list of users. GetUserById(int) Gets a user by their ID. [HttpGet(\"{id}\")] public IActionResult GetUserById(int id) Parameters id int The user ID. Returns IActionResult An IActionResult containing the user. UpdateUser(int, UserDto) Updates an existing user. [HttpPut(\"{id}\")] public IActionResult UpdateUser(int id, UserDto userDto) Parameters id int The user ID. userDto UserDto The user data transfer object containing updated user details. Returns IActionResult An IActionResult indicating the result of the update."
  },
  "doc/Oscars.Backend.Router.VoteRouter.html": {
    "href": "doc/Oscars.Backend.Router.VoteRouter.html",
    "title": "Class VoteRouter | PollZ",
    "summary": "Class VoteRouter Namespace Oscars.Backend.Router Assembly Oscars.dll Router for handling vote-related requests. [ApiController] [Route(\"api/vote\")] public class VoteRouter : ControllerBase Inheritance object ControllerBase VoteRouter Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors VoteRouter(VoteService) Router for handling vote-related requests. public VoteRouter(VoteService voteService) Parameters voteService VoteService Methods GetResults(int) Gets the results of a vote by question ID. [HttpGet(\"{questionId}\")] public Task<IActionResult> GetResults(int questionId) Parameters questionId int The question ID. Returns Task<IActionResult> An IActionResult containing the vote results. Insert(VoteRequestDto) Inserts a new vote or updates an existing vote. [HttpPost] public Task<IActionResult> Insert(VoteRequestDto voteRequestDto) Parameters voteRequestDto VoteRequestDto The vote request data transfer object containing vote details. Returns Task<IActionResult> An IActionResult indicating the result of the vote insertion or update."
  },
  "doc/Oscars.Backend.Router.VoterRouter.html": {
    "href": "doc/Oscars.Backend.Router.VoterRouter.html",
    "title": "Class VoterRouter | PollZ",
    "summary": "Class VoterRouter Namespace Oscars.Backend.Router Assembly Oscars.dll Router for handling voter-related requests. [ApiController] [Route(\"api/voters\")] public class VoterRouter : ControllerBase Inheritance object ControllerBase VoterRouter Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors VoterRouter(VoterService) Router for handling voter-related requests. public VoterRouter(VoterService voterService) Parameters voterService VoterService Methods Create(VoterDto) Creates a new voter. [HttpPost] public ActionResult Create(VoterDto voterDto) Parameters voterDto VoterDto The voter data transfer object containing voter details. Returns ActionResult An ActionResult indicating the result of the creation. Delete(int) Deletes a voter by their ID. [HttpDelete(\"{id}\")] public ActionResult Delete(int id) Parameters id int The voter ID. Returns ActionResult An ActionResult indicating the result of the deletion. GetAll() Gets all voters. [HttpGet] public ActionResult GetAll() Returns ActionResult An ActionResult containing the list of voters. GetByCode(string) Gets a voter by their code. [HttpGet(\"voter/{code}\")] public ActionResult<VoterWithCodeDto> GetByCode(string code) Parameters code string The voter code. Returns ActionResult<VoterWithCodeDto> An ActionResult containing the voter. GetById(int) Gets a voter by their ID. [HttpGet(\"{id}\")] public ActionResult GetById(int id) Parameters id int The voter ID. Returns ActionResult An ActionResult containing the voter. GetByPoll(int) Gets voters by poll ID. [HttpGet(\"poll/{pollId}\")] public ActionResult GetByPoll(int pollId) Parameters pollId int The poll ID. Returns ActionResult An ActionResult containing the voters. Update(int, VoterDto) Updates an existing voter. [HttpPut(\"{id}\")] public ActionResult Update(int id, VoterDto voterDto) Parameters id int The voter ID. voterDto VoterDto The voter data transfer object containing updated voter details. Returns ActionResult An ActionResult indicating the result of the update. UpdateCodeStatus(VoterWithCodeDto) Updates the status of a voter by their code. [HttpGet(\"code/{code}\")] public ActionResult UpdateCodeStatus(VoterWithCodeDto voterWithCodeDto) Parameters voterWithCodeDto VoterWithCodeDto The voter data transfer object containing voter details and code. Returns ActionResult An ActionResult indicating the result of the update."
  },
  "doc/Oscars.Backend.Router.html": {
    "href": "doc/Oscars.Backend.Router.html",
    "title": "Namespace Oscars.Backend.Router | PollZ",
    "summary": "Namespace Oscars.Backend.Router Classes AnswerRouter LoginRouter Router for handling authentication-related requests. PollRouter Router for handling poll-related requests. QuestionRouter Router for handling question-related requests. UserRouter Router for handling user-related requests. VoteRouter Router for handling vote-related requests. VoterRouter Router for handling voter-related requests."
  },
  "doc/Oscars.Backend.Service.AnswerService.html": {
    "href": "doc/Oscars.Backend.Service.AnswerService.html",
    "title": "Class AnswerService | PollZ",
    "summary": "Class AnswerService Namespace Oscars.Backend.Service Assembly Oscars.dll Service for handling answer-related operations. public class AnswerService Inheritance object AnswerService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AnswerService(string) Service for handling answer-related operations. public AnswerService(string connectionString) Parameters connectionString string Methods Create(AnswerDto) Creates a new answer. public Answer Create(AnswerDto answersDto) Parameters answersDto AnswerDto The answer data transfer object containing answer details. Returns Answer The created Answer. Delete(int) Deletes an answer by its ID. public void Delete(int id) Parameters id int The answer ID. GetAll() Gets all answers. public List<AnswerDto> GetAll() Returns List<AnswerDto> A list of AnswerDto. GetById(int) Gets an answer by its ID. public AnswerDto? GetById(int answerId) Parameters answerId int The answer ID. Returns AnswerDto An AnswerDto if found; otherwise, null. GetByQuestionId(int) Gets answers by question ID. public List<AnswerDto> GetByQuestionId(int questionId) Parameters questionId int The question ID. Returns List<AnswerDto> A list of AnswerDto. Update(AnswerDto) Updates an existing answer. public Answer Update(AnswerDto answerDto) Parameters answerDto AnswerDto The answer data transfer object containing updated answer details. Returns Answer The updated Answer."
  },
  "doc/Oscars.Backend.Service.AuthService.AuthResult.html": {
    "href": "doc/Oscars.Backend.Service.AuthService.AuthResult.html",
    "title": "Class AuthService.AuthResult | PollZ",
    "summary": "Class AuthService.AuthResult Namespace Oscars.Backend.Service Assembly Oscars.dll Represents the result of an authentication operation. public class AuthService.AuthResult Inheritance object AuthService.AuthResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Message public string? Message { get; set; } Property Value string Success public bool Success { get; set; } Property Value bool Token public string? Token { get; set; } Property Value string"
  },
  "doc/Oscars.Backend.Service.AuthService.html": {
    "href": "doc/Oscars.Backend.Service.AuthService.html",
    "title": "Class AuthService | PollZ",
    "summary": "Class AuthService Namespace Oscars.Backend.Service Assembly Oscars.dll Service for handling authentication-related operations. public class AuthService : IAuthService Inheritance object AuthService Implements IAuthService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AuthService(string, IOptions<JwtSettings>) Service for handling authentication-related operations. public AuthService(string connectionString, IOptions<JwtSettings> jwtSettings) Parameters connectionString string jwtSettings IOptions<JwtSettings> Methods LoginAsync(LoginDto) Logs in a user. public Task<AuthService.AuthResult> LoginAsync(LoginDto loginDto) Parameters loginDto LoginDto The login data transfer object containing login details. Returns Task<AuthService.AuthResult> An AuthService.AuthResult indicating the result of the login attempt. RegisterAsync(UserDto) Registers a new user. public Task<AuthService.AuthResult> RegisterAsync(UserDto userDto) Parameters userDto UserDto The user data transfer object containing registration details. Returns Task<AuthService.AuthResult> An AuthService.AuthResult indicating the result of the registration."
  },
  "doc/Oscars.Backend.Service.IAuthService.html": {
    "href": "doc/Oscars.Backend.Service.IAuthService.html",
    "title": "Interface IAuthService | PollZ",
    "summary": "Interface IAuthService Namespace Oscars.Backend.Service Assembly Oscars.dll Interface for authentication service. public interface IAuthService Methods LoginAsync(LoginDto) Logs in a user. Task<AuthService.AuthResult> LoginAsync(LoginDto loginDto) Parameters loginDto LoginDto The login data transfer object containing login details. Returns Task<AuthService.AuthResult> An AuthService.AuthResult indicating the result of the login attempt. RegisterAsync(UserDto) Registers a new user. Task<AuthService.AuthResult> RegisterAsync(UserDto userDto) Parameters userDto UserDto The user data transfer object containing registration details. Returns Task<AuthService.AuthResult> An AuthService.AuthResult indicating the result of the registration."
  },
  "doc/Oscars.Backend.Service.IUserService.html": {
    "href": "doc/Oscars.Backend.Service.IUserService.html",
    "title": "Interface IUserService | PollZ",
    "summary": "Interface IUserService Namespace Oscars.Backend.Service Assembly Oscars.dll Interface for user service. public interface IUserService Methods CreateUser(UserDto) void CreateUser(UserDto userDto) Parameters userDto UserDto DeleteUser(int) void DeleteUser(int id) Parameters id int GetAllUsers() IEnumerable<User> GetAllUsers() Returns IEnumerable<User> GetUserById(int) User GetUserById(int id) Parameters id int Returns User UpdateUser(int, UserDto) void UpdateUser(int id, UserDto userDto) Parameters id int userDto UserDto"
  },
  "doc/Oscars.Backend.Service.PollService.html": {
    "href": "doc/Oscars.Backend.Service.PollService.html",
    "title": "Class PollService | PollZ",
    "summary": "Class PollService Namespace Oscars.Backend.Service Assembly Oscars.dll Service for handling poll-related operations. public class PollService Inheritance object PollService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PollService(string) Service for handling poll-related operations. public PollService(string connectionString) Parameters connectionString string Methods Create(PollDto) Creates a new poll. public Poll Create(PollDto pollDto) Parameters pollDto PollDto The poll data transfer object containing poll details. Returns Poll The created Poll. Delete(int) Deletes a poll by its ID. public void Delete(int id) Parameters id int The poll ID. GetAll() Gets all polls. public List<PollDto> GetAll() Returns List<PollDto> A list of PollDto. GetById(int) Gets a poll by its ID. public PollDto? GetById(int pollId) Parameters pollId int The poll ID. Returns PollDto A PollDto if found; otherwise, null. Update(PollDto) Updates an existing poll. public Poll Update(PollDto pollDto) Parameters pollDto PollDto The poll data transfer object containing updated poll details. Returns Poll The updated Poll."
  },
  "doc/Oscars.Backend.Service.QuestionService.html": {
    "href": "doc/Oscars.Backend.Service.QuestionService.html",
    "title": "Class QuestionService | PollZ",
    "summary": "Class QuestionService Namespace Oscars.Backend.Service Assembly Oscars.dll Service for handling question-related operations. public class QuestionService Inheritance object QuestionService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors QuestionService(string) Service for handling question-related operations. public QuestionService(string connectionString) Parameters connectionString string Methods Create(QuestionDto) Creates a new question. public Question Create(QuestionDto questionDto) Parameters questionDto QuestionDto The question data transfer object containing question details. Returns Question The created Question. Delete(int) Deletes a question by its ID. public void Delete(int id) Parameters id int The question ID. GetAll() Gets all questions. public List<QuestionDto> GetAll() Returns List<QuestionDto> A list of QuestionDto. GetById(int) Gets a question by its ID. public QuestionDto? GetById(int questionId) Parameters questionId int The question ID. Returns QuestionDto A QuestionDto if found; otherwise, null. GetByPollId(int) Gets questions by poll ID. public List<QuestionDto> GetByPollId(int pollId) Parameters pollId int The poll ID. Returns List<QuestionDto> A list of QuestionDto. Update(QuestionDto) Updates an existing question. public Question Update(QuestionDto questionDto) Parameters questionDto QuestionDto The question data transfer object containing updated question details. Returns Question The updated Question."
  },
  "doc/Oscars.Backend.Service.UserService.html": {
    "href": "doc/Oscars.Backend.Service.UserService.html",
    "title": "Class UserService | PollZ",
    "summary": "Class UserService Namespace Oscars.Backend.Service Assembly Oscars.dll Service for handling user-related operations. public class UserService : IUserService Inheritance object UserService Implements IUserService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UserService(string) Service for handling user-related operations. public UserService(string connectionString) Parameters connectionString string Methods CreateUser(UserDto) Creates a new user. public void CreateUser(UserDto userDto) Parameters userDto UserDto The user data transfer object containing user details. DeleteUser(int) Deletes a user by their ID. public void DeleteUser(int id) Parameters id int The user ID. GetAllUsers() Gets all users. public IEnumerable<User> GetAllUsers() Returns IEnumerable<User> An enumerable collection of User. GetUserById(int) Gets a user by their ID. public User GetUserById(int id) Parameters id int The user ID. Returns User A User if found; otherwise, throws KeyNotFoundException. UpdateUser(int, UserDto) Updates an existing user. public void UpdateUser(int id, UserDto userDto) Parameters id int The user ID. userDto UserDto The user data transfer object containing updated user details."
  },
  "doc/Oscars.Backend.Service.VoteService.html": {
    "href": "doc/Oscars.Backend.Service.VoteService.html",
    "title": "Class VoteService | PollZ",
    "summary": "Class VoteService Namespace Oscars.Backend.Service Assembly Oscars.dll Service for handling vote-related operations. public class VoteService Inheritance object VoteService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors VoteService(string) Service for handling vote-related operations. public VoteService(string connectionString) Parameters connectionString string Methods Create(VoteRequestDto) Creates a new vote. public Task<bool> Create(VoteRequestDto voteRequestDto) Parameters voteRequestDto VoteRequestDto The vote request data transfer object containing vote details. Returns Task<bool> A boolean indicating whether the vote was successfully created. GetResultsAsync(int) Gets the results of a vote by question ID. public Task<List<VoteResultDto>> GetResultsAsync(int questionId) Parameters questionId int The question ID. Returns Task<List<VoteResultDto>> A list of VoteResultDto containing the vote results. HasVotedAsync(VoteRequestDto) Checks if a voter has already voted. public Task<bool> HasVotedAsync(VoteRequestDto voteRequestDto) Parameters voteRequestDto VoteRequestDto The vote request data transfer object containing vote details. Returns Task<bool> A boolean indicating whether the voter has already voted. Update(VoteRequestDto) Updates an existing vote. public Task<bool> Update(VoteRequestDto voteRequestDto) Parameters voteRequestDto VoteRequestDto The vote request data transfer object containing updated vote details. Returns Task<bool> A boolean indicating whether the vote was successfully updated."
  },
  "doc/Oscars.Backend.Service.VoterService.html": {
    "href": "doc/Oscars.Backend.Service.VoterService.html",
    "title": "Class VoterService | PollZ",
    "summary": "Class VoterService Namespace Oscars.Backend.Service Assembly Oscars.dll Service for handling voter-related operations. public class VoterService Inheritance object VoterService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors VoterService(string) Service for handling voter-related operations. public VoterService(string connectionString) Parameters connectionString string Methods Create(VoterDto) Creates a new voter. public Voter Create(VoterDto voterDto) Parameters voterDto VoterDto The voter data transfer object containing voter details. Returns Voter The created Voter. Delete(int) Deletes a voter by their ID. public void Delete(int id) Parameters id int The voter ID. GetAll() Gets all voters. public List<VoterWithCodeDto> GetAll() Returns List<VoterWithCodeDto> A list of VoterWithCodeDto. GetById(int) Gets a voter by their ID. public VoterWithCodeDto? GetById(int voterId) Parameters voterId int The voter ID. Returns VoterWithCodeDto A VoterWithCodeDto if found; otherwise, null. GetByPoll(int) Gets voters by poll ID. public List<VoterWithCodeDto> GetByPoll(int pollId) Parameters pollId int The poll ID. Returns List<VoterWithCodeDto> A list of VoterWithCodeDto. GetVoterByCode(string) Gets a voter by their code. public VoterWithCodeDto? GetVoterByCode(string code) Parameters code string The voter code. Returns VoterWithCodeDto A VoterWithCodeDto if found; otherwise, null. Update(VoterDto) Updates an existing voter. public Voter Update(VoterDto voterDto) Parameters voterDto VoterDto The voter data transfer object containing updated voter details. Returns Voter The updated Voter. UpdateCodeStatus(VoterWithCodeDto) Updates the status of a voter's code. public void UpdateCodeStatus(VoterWithCodeDto voterWithCodeDto) Parameters voterWithCodeDto VoterWithCodeDto The voter data transfer object containing voter details and code."
  },
  "doc/Oscars.Backend.Service.html": {
    "href": "doc/Oscars.Backend.Service.html",
    "title": "Namespace Oscars.Backend.Service | PollZ",
    "summary": "Namespace Oscars.Backend.Service Classes AnswerService Service for handling answer-related operations. AuthService Service for handling authentication-related operations. AuthService.AuthResult Represents the result of an authentication operation. PollService Service for handling poll-related operations. QuestionService Service for handling question-related operations. UserService Service for handling user-related operations. VoteService Service for handling vote-related operations. VoterService Service for handling voter-related operations. Interfaces IAuthService Interface for authentication service. IUserService Interface for user service."
  },
  "doc/Oscars.Backend.Utils.JwtSettings.html": {
    "href": "doc/Oscars.Backend.Utils.JwtSettings.html",
    "title": "Class JwtSettings | PollZ",
    "summary": "Class JwtSettings Namespace Oscars.Backend.Utils Assembly Oscars.dll Configuration settings for JWT (JSON Web Token). public class JwtSettings Inheritance object JwtSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Audience public string Audience { get; set; } Property Value string ExpiryMinutes public int ExpiryMinutes { get; set; } Property Value int Issuer public string Issuer { get; set; } Property Value string SecretKey public string SecretKey { get; set; } Property Value string"
  },
  "doc/Oscars.Backend.Utils.Parser.html": {
    "href": "doc/Oscars.Backend.Utils.Parser.html",
    "title": "Class Parser | PollZ",
    "summary": "Class Parser Namespace Oscars.Backend.Utils Assembly Oscars.dll Configuration settings for JWT (JSON Web Token). public class Parser Inheritance object Parser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ParseDateTime(string) Parses a string to a DateTime. public DateTime? ParseDateTime(string dateTimeString) Parameters dateTimeString string The string to parse. Returns DateTime? The DateTime representation of the string, or null if the string cannot be parsed. ParseInt(object) Parses an object to an integer. public int? ParseInt(object value) Parameters value object The object to parse. Returns int? The integer representation of the object, or null if the object is null or cannot be parsed. ParseString(object) Parses an object to a string. public string? ParseString(object value) Parameters value object The object to parse. Returns string The string representation of the object, or null if the object is null."
  },
  "doc/Oscars.Backend.Utils.html": {
    "href": "doc/Oscars.Backend.Utils.html",
    "title": "Namespace Oscars.Backend.Utils | PollZ",
    "summary": "Namespace Oscars.Backend.Utils Classes JwtSettings Configuration settings for JWT (JSON Web Token). Parser Configuration settings for JWT (JSON Web Token)."
  },
  "doc/Oscars.Data.DBConnection.html": {
    "href": "doc/Oscars.Data.DBConnection.html",
    "title": "Class DBConnection | PollZ",
    "summary": "Class DBConnection Namespace Oscars.Data Assembly Oscars.dll Class for managing database connections and running migrations. public class DBConnection Inheritance object DBConnection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DBConnection(IConfiguration) Class for managing database connections and running migrations. public DBConnection(IConfiguration configuration) Parameters configuration IConfiguration Methods CreateConnection() Creates a new database connection. public IDbConnection CreateConnection() Returns IDbConnection An IDbConnection object. RunMigrationsAsync(string, string) Runs database migrations asynchronously. public static Task RunMigrationsAsync(string connectionString, string scriptPath) Parameters connectionString string The database connection string. scriptPath string The path to the SQL script file. Returns Task"
  },
  "doc/Oscars.Data.html": {
    "href": "doc/Oscars.Data.html",
    "title": "Namespace Oscars.Data | PollZ",
    "summary": "Namespace Oscars.Data Classes DBConnection Class for managing database connections and running migrations."
  },
  "doc/Oscars.Models.User.html": {
    "href": "doc/Oscars.Models.User.html",
    "title": "Class User | PollZ",
    "summary": "Class User Namespace Oscars.Models Assembly Oscars.dll Represents a user in the system. public class User Inheritance object User Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Email public required string Email { get; set; } Property Value string Id public int Id { get; set; } Property Value int Password public string? Password { get; set; } Property Value string Role public required string Role { get; set; } Property Value string Username public required string Username { get; set; } Property Value string"
  },
  "doc/Oscars.Models.html": {
    "href": "doc/Oscars.Models.html",
    "title": "Namespace Oscars.Models | PollZ",
    "summary": "Namespace Oscars.Models Classes User Represents a user in the system."
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to the Documentation Page of PollZ Platform | PollZ",
    "summary": "Welcome to the Documentation Page of PollZ Platform Dive into the project: Presentation: a. Platform Introduction; b. Onion Architecture; c. Database Schema; d. Frameworks and Techonologies; e. Key Features; f. Backend Structure; g. Conclusion; Documentation: here you can check every function of the platform and what it does. Image Preview: You can preview the platform's main features. Enjoy exploring the PollZ documentation!"
  },
  "preview/preview.html": {
    "href": "preview/preview.html",
    "title": "Preview | PollZ",
    "summary": "Preview"
  }
}